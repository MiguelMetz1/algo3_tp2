@startuml

interface Attack {
    + Attack( Enemy enemy )
    + withinRange()
}

class AttackTowerSilver {
    - rangeAttack : RangeAttack
    + AttackTowerSilver( RangeAttack rangeAttack )
    + attack( Enemy enemy )
    + withinRange()
}

class AttackTowerWhite {
    - rangeAttack : RangeAttack
    + AttackTowerWhite( RangeAttack rangeAttack )
    + attack( Enemy enemy )
    + withinRange()
}

Attack <|.. AttackTowerSilver
Attack <|.. AttackTowerWhite

interface Builder {
    + finished();
    + progress();
}

class BuilderTowerSilver {
    - timeConstruction : int
    + finished()
    + progress()
    + BuilderTowerSilver(int timeConstruction)
}

class BuilderTowerWhite {
    - timeConstruction : int
    + finished()
    + pogress()
    + BuilderTowerWhite( int timeConstruction )
}

Builder <|.. BuilderTowerSilver
Builder <|.. BuilderTowerWhite

abstract class Defense {
    /'# builder : Builder'/
    /'# attack : Attack'/
    # rangeAttack : RangeAttack
    - damage : Damage
    # stateDefense : StateDefense
    + Defense( RangeAttack rangeAttack, Damage damage )
    + attack()
    + build()
    + notifyPlayer()
    # setState( StateDefense state )
}

class TowerSilver {
    - attack : Attack
    + TowerSilver(RangeAttack rangeAttack, Damage damage, int timeConstruction)
    + attack()
    + build()
}

class TowerWhite {
    - attack : Attack
    + TowerWhite(RangeAttack rangeAttack, Damage damage, int timeConstruction)
    + attack()
    + build()
}

Defense <|-- TowerSilver
Defense <|-- TowerWhite
Defense <-- Builder
Defense <-- Attack

@enduml