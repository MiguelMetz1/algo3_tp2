@startuml
'https://plantuml.com/class-diagram



abstract class Plot {
    -Coordinates: Coordinate
    +{abstract}CanBuild(Defense)
}
 class Gangway {
    +Execute()
}

class InitGangway{
    +Execute()
    -SpawnEnemies()
}
class FinalGangway{
    +Execute()
    -MakeEnemiesAttack()
}

class Rocky {}
class Ground {
    -Defense: Defense
    +Build(Defense)
}

Plot <|-- Gangway
Plot <|-- Rocky
Plot <|-- Ground
Gangway <|-- InitGangway
Gangway <|-- FinalGangway


class Coordinate {
    -x: Int
    -y: Int
}




class Character {
    -Name: String
    -Life: Life
    -Credits: Credits
    -Defenses: OrderedCollection
    +TakeDamage(Damage)
    -SpendCredits(Amount: Int)
}
class Computer {
    -Enemies: OrderedCollection
}


abstract class Enemy {
    -Speed: Atribute
    -Energy: Atribute
    -Damage: Atribute
    -Plot: Gangway
    +Attack()
}

abstract class Atribute {
    -Value: int
    +Atribute(Value)
    +{abstract}Execute()


}
class Damage{
}
class Energy{
}
class Speed{
}
class Cost{
}

Atribute <|-- Damage
Atribute <|-- Energy
Atribute <|-- Speed
Atribute <|-- Cost
class Ant
class Spider

Enemy <|- Spider
Enemy <|- Ant

class Map {
    -Grid: OrderedCollection
    +CanBuild(Defense, Coordinate):bool

}
Map *-- Plot

abstract class DefenseStatus {
    +{abstract}TryToattack(Enemy: Enemy, Damage: Damage)

}
note left
InConstruction TryToAttack return Exeption and calls
BuildDefense(0
AvailableAttack TryToAttack with no Exeption and calls
Attack(......)

end note


class InConstruction {
    +TryToAttack(Enemy enemy, Damage damage)
    -BuildDefense()
}

class AvailableAttack {
    +TryToAttack(Enemy enemy, Damage damage)
    -Attack(Enemy enemy, Damage damage)
}
DefenseStatus <|-- InConstruction
DefenseStatus <|-- AvailableAttack

abstract class Defense {
    -AttackRange: AttackRange
    -Damage: Atribute
    -DefenseStatus: DefenseStatus
    -Cost: Atribute
    -Plot: Ground
    +Build(Credits: int)


}

class WhiteTower
class SilverTower

Defense <-- DefenseStatus
Defense <|-- WhiteTower
Defense <|-- SilverTower


Character <-- Defense
Computer <-- Enemy

Plot <-- Coordinate

abstract class Turn {
    +{abstract}execute()
}
class PlayerTurn
class ComputerTurn
Turn <|-- PlayerTurn
Turn <|-- ComputerTurn

class GameInterface{
    -Map: Map
    -Character: Character
    -Computer: Computer
    -Turn: Turn
    +Build(Defense, Coordinate)
    +ChangeTurn()
    +RegisterCharacter(Username: String)

}
GameInterface <-- Map
GameInterface <-- Turn

@enduml